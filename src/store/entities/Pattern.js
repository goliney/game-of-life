class Pattern {
  constructor(name, dots) {
    const size = 5;
    this.name = name;
    this.dots = dots;
    this.cells = Pattern.getCellsFromDots(this.dots);
    this.coordinates = this.cells.map(({ x, y }) => Object.freeze({
      x: x * size,
      y: y * size,
    }));
  }

  static getCellsFromDots(dots) {
    const rows = dots.split('\n');
    const result = [];
    rows.forEach((row, i) => {
      row.trim().split('').forEach((char, j) => {
        if (char === '*') {
          result.push({ x: j, y: i });
        }
      });
    });
    return result;
  }
}

const patterns = [
  new Pattern(
    'Aircraft carrier',
    `
    .**..
    .*..*
    ...**
    `,
  ),
  new Pattern(
    'Acorn',
    `
    ..*.....
    ....*...
    .**..***
    `,
  ),
  new Pattern(
    'A for All',
    `
    .....**....
    ....*..*...
    ....****...
    ..*.*..*.*.
    .*........*
    .*........*
    ..*.*..*.*.
    ....****...
    ....*..*...
    .....**....
    `,
  ),
  new Pattern(
    'Airforce',
    `
    ........*......
    .......*.*.....
    ........*......
    ...............
    ......*****....
    .....*.....*.**
    ....*.**...*.**
    ....*.*..*.*...
    .**.*...**.*...
    .**.*.....*....
    .....*****.....
    ...............
    .......*.......
    ......*.*......
    .......*.......
    `,
  ),
  new Pattern(
    'Ants',
    `
    .**........**...**...**...**...**...**..
    ...**.**.....**...**...**...**...**...**
    ...**...**...**...**...**...**...**...**
    .**.....**.**...**...**...**...**...**..
    ......**................................
    `,
  ),
  new Pattern(
    'Bakery',
    `
    .....**....
    ....*..*...
    ....*.*....
    ..**.*...*.
    .*..*...*.*
    .*.*...*..*
    ..*...*.**.
    .....*.*...
    ....*..*...
    .....**....
    `,
  ),
  new Pattern(
    'Barberpole',
    `
    ......**
    .......*
    ....*.*.
    ........
    ..*.*...
    .*......
    .**.....
    `,
  ),
  new Pattern(
    'Beehive with tail',
    `
    ..*...
    .*.*..
    .*.*..
    ..*...
    ...***
    .....*
    `,
  ),
  new Pattern(
    'Blinker ship',
    `
    ............*..*...............
    ...........*...................
    ...........*...*...............
    ...**......****................
    ..****.........................
    .**.**.........................
    ..**.....**.***................
    ........*.....**.......*....***
    .......**.......*......*....*.*
    ........*.....**.......*....***
    ..**.....**.***................
    .**.**.........................
    ..****.........................
    ...**......****................
    ...........*...*...............
    ...........*...................
    ............*..*...............
    `,
  ),
  new Pattern(
    'Boss',
    `
    ......*.....
    .....*.*....
    .....*.*....
    ....**.**...
    ...*.....*..
    ..*.*.*.*.*.
    ..*.*...*.*.
    .**.*...*.**
    .*..*.*.*..*
    ...*.....*..
    ....**.**...
    .....*.*....
    .....*.*....
    ......*.....
    `,
  ),
  new Pattern(
    'Brain',
    `
    ..**........
    .*..*.....**
    .***...***..
    .*..*.****..
    ..***...*...
    ..*..***....
    ....*....**.
    ....*****.*.
    ............
    ....*****.*.
    ....*....**.
    ..*..***....
    ..***...*...
    .*..*.****..
    .***...***..
    .*..*.....**
    ..**........
    `,
  ),
  new Pattern(
    'Caterer',
    `
    ......*..
    .****...*
    ....*...*
    ........*
    .....*...
    ......**.
    `,
  ),
  new Pattern(
    'Chemist',
    `
    ........*.......
    ........***.....
    ...........*....
    ......***..*..**
    .....*.*.*.*.*.*
    .....*...*.*.*..
    ..**.*.*.*.*.**.
    ...*.*.*...*....
    .*.*.*.*.*.*....
    .**..*..***.....
    .....*..........
    ......***.......
    ........*.......
    `,
  ),
  new Pattern(
    'Fumarole',
    `
    ....**...
    ..*....*.
    ..*....*.
    ..*....*.
    ...*..*..
    .*.*..*.*
    .**....**
    `,
  ),
  new Pattern(
    'Glider',
    `
    ...*
    .*.*
    ..**
    `,
  ),
  new Pattern(
    'Gourmet',
    `
    ...........**........
    ...........*.........
    ...*.**.**.*.....**..
    ...**.*.*.*......*...
    .........*........*..
    .................**..
    .....................
    ............*....**..
    .*.........*.*..*.*..
    .***......**.**..*...
    ....*.............***
    ...*.*..............*
    ...**................
    .....................
    ...**................
    ...*........*........
    ....*......*.*.*.**..
    ...**.....*.**.**.*..
    ..........*..........
    .........**..........
    `,
  ),
  new Pattern(
    'Hertz oscillator',
    `
    ....**.*....
    ....*.**....
    ............
    .....***....
    ....*.*.*.**
    ....*...*.**
    .**.*...*...
    .**.*...*...
    .....***....
    ............
    .....**.*...
    .....*.**...
    `,
  ),
  new Pattern(
    'Hustler',
    `
    ......**....
    ......**....
    ............
    ....****....
    .*.*....*...
    .**.*...*...
    ....*...*.**
    ....*....*.*
    .....****...
    ............
    .....**.....
    .....**.....
    `,
  ),
  new Pattern(
    'Induction coil',
    `
    ..**....
    ..*..*..
    ...***..
    ........
    .*******
    .*..*..*
    `,
  ),
  new Pattern(
    'Jam',
    `
    .....**.
    ....*..*
    ..*..*.*
    .*....*.
    .*......
    ...***..

    `,
  ),
  new Pattern(
    'Lightweight emulator',
    `
    ...**.*..*.**..
    ...*........*..
    ....**....**...
    .***..****..***
    .*..*......*..*
    ..**........**.
    `,
  ),
  new Pattern(
    'Middleweight volcano',
    `
    ....*******...
    ..***.***.***.
    .*....***....*
    ..****.*.***.*
    ............*.
    .*.**.*.*.*...
    .**.*.*.*.**..
    .....*..*.*...
    ......**..*...
    ..........**..
    `,
  ),
  new Pattern(
    'Pseudo-barberpole',
    `
    ...........**
    ............*
    ..........*..
    ........*.*..
    .............
    ......*.*....
    .............
    ....*.*......
    .............
    ...**........
    .*...........
    .**..........

    `,
  ),
  new Pattern(
    'R2D2',
    `
    ....**...
    ....**...
    .........
    ..******.
    .*......*
    .***...**
    .........
    .********
    .*......*
    ....**...
    ....**...

    `,
  ),
  new Pattern(
    'Rephaser',
    `
    ....**...
    ....**...
    .........
    .........
    ..**..**.
    .*.*..*.*
    ...*..*..
    `,
  ),
  new Pattern(
    'Revolver',
    `
    .**....**
    ..*....*.
    ..*.**.*.
    ...*..*..
    ....*....
    ......*..
    ..**.....
    ......**.
    ...*.....
    .....*...
    ...*..*..
    ..*.**.*.
    ..*....*.
    .**....**
    `,
  ),
  new Pattern(
    'Roteightor',
    `
    ..*............
    ..***........**
    .....*.......*.
    ....**.....*.*.
    ...........**..
    ...............
    ......***......
    ......*..*.....
    ......*........
    ...**..*...*...
    ..*.*......*...
    ..*.......*....
    .**........***.
    .............*.

    `,
  ),
  new Pattern(
    'Ship on boat, boat-ship-tie',
    `
    .**....
    .*.*...
    ..**...
    ....**.
    ....*.*
    .....*.
    `,
  ),
  new Pattern(
    'Siesta',
    `
    ............**...
    ....**.....*.*...
    ....*.*....*.....
    ......*...**.*...
    ....*.**.....***.
    ..***.....*.*...*
    .*...*.*.....***.
    ..***.....**.*...
    ....*.**...*.....
    ......*....*.*...
    ....*.*.....**...
    ....**...........
    `,
  ),
  new Pattern(
    'Sparky',
    `
    ...........*....................
    ...........*...............**...
    .......**.*.***..........**...*.
    .*.**.**.**..*.*...**.****......
    .*...**..*.**..***..*.**..**...*
    .*.**....***.*.***......**..*...
    .........**.*...............*..*
    .*.**....***.*.***......**..*...
    .*...**..*.**..***..*.**..**...*
    .*.**.**.**..*.*...**.****......
    .......**.*.***..........**...*.
    ...........*...............**...
    ...........*....................
    `,
  ),
  new Pattern(
    'Switch engine',
    `
    ..*.*..
    .*.....
    ..*..*.
    ....***
    `,
  ),
  new Pattern(
    'Tubber',
    `
    .....*.*......
    .....**.*.....
    ........***...
    .....**....*..
    .**.*..**..*..
    ..*.*....*.**.
    .*...*...*...*
    ..**.*....*.*.
    ...*..**..*.**
    ...*....**....
    ....***.......
    ......*.**....
    .......*.*....

    `,
  ),
  new Pattern(
    'Unix',
    `
    ..**.....
    ..**.....
    .........
    ..*......
    .*.*.....
    .*..*..**
    .....*.**
    ...**....
    `,
  ),
];

export default Pattern;
export { patterns };
